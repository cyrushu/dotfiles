" download vim plug if not have vim plugins
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

let g:ale_completion_enabled = 0

call plug#begin('~/.vim_local/plugged')
if has('nvim')
	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' } 
else
	Plug 'ctrlpvim/ctrlp.vim'
endif
" Git plugins
Plug 'airblade/vim-gitgutter'
Plug 'Xuyuanp/nerdtree-git-plugin'

" Utils
Plug 'bling/vim-airline'
Plug 'scrooloose/nerdcommenter'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-surround'
Plug 'kien/rainbow_parentheses.vim'
Plug 'easymotion/vim-easymotion'
Plug 'terryma/vim-expand-region'
Plug 'terryma/vim-multiple-cursors'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'Yggdroot/indentLine'
Plug 'junegunn/seoul256.vim'
Plug 'Raimondi/delimitMate'

Plug 'dense-analysis/ale'
" Plug 'vim-scripts/Conque-GDB', { 'for':'cpp' }


Plug 'octol/vim-cpp-enhanced-highlight', { 'for':'cpp'}
"============== LanguageClient may replace all of following plugins
" Python
Plug 'heavenshell/vim-pydocstring', { 'do': 'make install' }
"============== LanguageClient 

" markdown
Plug 'shime/vim-livedown' ,{'for':'markdown'}

" latex
Plug 'lervag/vimtex',{'for':'latex' }

" Clipboard
Plug 'roxma/vim-tmux-clipboard'
Plug 'wellle/tmux-complete.vim'


Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'

" File Searcher
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()


" ========== vim studying
" folding

" ========== interesting plugin
" Plug 'Shougo/neosnippet'
" Plug 'Shougo/neosnippet-snippets'
" tarbar
" taglist
" TaskList
" fugitive git-plugins
" tcomment_vim comment plugins


"============== sometime you need to specify python for neovim, please try to
"============== modify the python location. you could also write them into the
"============== nvim_local.vim file

if has('nvim')
	if filereadable("~/.vim_local/nvim_local.vim")
		source ~/.vim_local/nvim_local.vim
		" let g:python_host_prog = '~/envs/neovim/bin/python'
		" let g:python3_host_prog = '~/envs/neovim3/bin/python'
	endif
endif

"============== file sharing between nvim and vim
if has('nvim')
	source ~/.vim/startup/settings.nvim
elseif !has('nvim')
	source ~/.vim/startup/settings.vim
endif
source ~/.vim/startup/CommonKeymapping.vim
source ~/.vim/startup/CommonSettings.vim
source ~/.vim/startup/vimFunctions.vim
source ~/.vim/startup/Plugins.vim

"============== LanguageClient for custom settings
" source ~/.vim/startup/LanguageClient.vim
source ~/.vim/startup/ALE.vim

"============== Filetype autocmd
autocmd FileType yaml source ~/.vim/LanguageModule/yaml.vim
autocmd FileType json source ~/.vim/LanguageModule/json.vim
autocmd FileType python source ~/.vim/LanguageModule/python.vim
autocmd FileType cpp source ~/.vim/LanguageModule/cpp.vim
autocmd FileType markdown source ~/.vim/LanguageModule/markdown.vim


"============== OverWrite some plugin keymappings
source ~/.vim/startup/PostKeymapping.vim
